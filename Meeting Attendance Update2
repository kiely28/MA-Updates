

<%@ Page Language="C#" AutoEventWireup="true" CodeBehind="meetingattendance.aspx.cs" Inherits="WebApplication1_MAL.meetingattendance1" %>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no" />
    <meta name="description" content="" />
    <meta name="author" content="" />
    <title>Meeting Attendance Tapping</title>

    <!-- Fonts -->
    <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Nunito">

    <!-- Custom styles -->
    <link href="css/styles.css" rel="stylesheet" />
    <!-- Custom styles1 -->
    <link href="Scripts2/styles.css" rel="stylesheet" />

    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">

    <!-- Font Awesome -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css" rel="stylesheet" />

    <!-- Existing JS -->
    <script src="Scripts2/jquery-3.2.0.min.js"></script>
    <script src="Scripts2/all.min.js"></script>

    <style>
        .custom-input {
            font-size: 2rem;
            padding: 1rem 1.5rem;
        }

        .form-check input[type="radio"] {
            width: 1.5em;
            height: 1.5em;
        }

        .form-check label {
            font-size: 1.25rem;
            padding-left: 0.5em;
        }
    </style>
</head>

<body class="sb-nav-fixed">
    <form id="form1" runat="server">
        <!-- Top Navbar -->
        <nav class="navbar navbar-expand" style="background-color: #10218B;" data-bs-theme="dark">
            <div class="container-fluid">
                <a class="navbar-brand ps-3" href="Home1.aspx" style="font-weight: bold; font-family: nunito; font-size: 17px;">Meeting Attendance Tapping</a>
                <!-- Sidebar Toggle-->
                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">
                    <span class="navbar-toggler-icon"></span>
                </button>
                <div class="collapse navbar-collapse" id="navbarNav">
                    <ul class="navbar-nav ms-auto">
                        <li class="nav-item"><a class="nav-link" href="Home1.aspx">Dashboard</a></li>
                        <li class="nav-item"><a class="nav-link active" href="meetinglist1.aspx">Meetings</a></li>
                        <li class="nav-item"><a class="nav-link" href="#">History Logs</a></li>
                    </ul>
                </div>
                <!-- User Dropdown -->
                <ul class="navbar-nav ms-auto me-3">
                    <li class="nav-item dropdown">
                        <a class="nav-link dropdown-toggle" id="navbarDropdown" href="#" role="button" data-bs-toggle="dropdown" aria-expanded="false"><i class="fas fa-user fa-fw"></i></a>
                        <ul class="dropdown-menu dropdown-menu-end" aria-labelledby="navbarDropdown">
                            <li><a class="dropdown-item" href="#">Logout</a></li>
                        </ul>
                    </li>
                </ul>
            </div>
        </nav>



        <main>
            <div class="container-fluid px-4">

                <h1 class="mt-3">
                    <asp:Label ID="lblTitle" runat="server" Text="Title"></asp:Label>
                </h1>
                <ol class="breadcrumb mb-4 mt-3">
                    <li class="breadcrumb-item active">
                        <asp:Label ID="lblDateTime" runat="server" Text="Date / Time"></asp:Label>
                    </li>
                </ol>              

                <!-- Hidden Meeting ID -->
                <asp:HiddenField ID="hfMeetingID" runat="server" />



                <div class="row">
                    <div class="col-3 col-lg-3 mb-3">
                        <input type="radio" class="btn-check" name="options-outlined" id="success-outlined" autocomplete="off" checked>
                        <label class="btn btn-outline-primary w-100 btn-lg" for="success-outlined">In</label>
                    </div>
                    <div class="col-3 col-lg-3 mb-3">
                        <input type="radio" class="btn-check" name="options-outlined" id="danger-outlined" autocomplete="off">
                        <label class="btn btn-outline-secondary w-100 btn-lg" for="danger-outlined">Out</label>
                    </div>
                    <div class="col-6 col-md-6 ms-auto">
                        <asp:Button ID="btnViewAttendees" runat="server" Text="View Attendees"
                            CssClass="btn btn-info" OnClick="btnEndMeeting_Click" />
                    
                        <asp:Button ID="btnEndMeeting" runat="server" Text="End Meeting"
                            CssClass="btn btn-danger" OnClick="btnEndMeeting_Click" />
                    </div>
                </div>

                <div class="mb-3">
                    <%--<label class="form-label">Card Serial Number</label>--%>
                    <asp:TextBox ID="txtCardSerial" runat="server" CssClass="form-control custom-input" placeholder="Place your ID card on the reader"></asp:TextBox>
                </div>               
                
                <div class="mt-3">
                    <asp:Panel ID="pnlAlert" runat="server" Visible="false" CssClass="alert alert-dismissible fade show" role="alert">
                        <asp:Label ID="lblMessage" runat="server"></asp:Label>
                        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                    </asp:Panel>
                </div>

                <!-- Script for auto fade out -->
                <script type="text/javascript">
                    function fadeOutAlert() {
                        var alertBox = document.getElementById('<%= pnlAlert.ClientID %>');
                        if (alertBox) {
                            setTimeout(function () {
                                alertBox.classList.add("fade");
                                alertBox.classList.remove("show");
                                setTimeout(function () {
                                    alertBox.style.display = "none";
                                }, 500); // wait for fade animation
                            }, 3000); // alert visible for 3 sec
                        }
                    }
                </script>
                <%--</div>--%>
            </div>
        </main>
    </form>

    <!-- Scripts already in your footer -->
    <script src="Scripts2/bootstrap.bundle.min.js"></script>
    <script src="Scripts2/scripts.js"></script>
    <script src="Scripts2/simple-datatables.js"></script>
    <script src="Scripts2/datatables-simple-demo.js"></script>
</body>
</html>

-- Code Behind

using System;
using System.Collections.Generic;
using System.Configuration;
using System.Data;
using System.Data.SqlClient;
using System.Data.SqlTypes;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;

namespace WebApplication1_MAL
{
    public partial class meetingattendance1 : System.Web.UI.Page
    {
        protected void Page_Load(object sender, EventArgs e)
        {
            if (!IsPostBack)
            {
                string meetingId = Request.QueryString["meetingId"];
                if (!string.IsNullOrEmpty(meetingId))
                {
                    LoadMeetingDetails(meetingId);
                }
                else
                {
                    lblTitle.Text = "Invalid Meeting";
                    lblDateTime.Text = "";
                }
            }
        }

        private void LoadMeetingDetails(string meetingId)
        {
            string connStr = ConfigurationManager.ConnectionStrings["MeetingDb"].ConnectionString;

            using (SqlConnection conn = new SqlConnection(connStr))
            using (SqlCommand cmd = new SqlCommand("MA_GetMeetingDetails", conn))
            {
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@MeetingId", meetingId);

                conn.Open();
                SqlDataReader reader = cmd.ExecuteReader();
                if (reader.Read())
                {
                    lblTitle.Text = reader["Title"].ToString();
                    //lblDateTime.Text = $"{Convert.ToDateTime(reader["StartDateTime"]):MM-dd-yyyy hh:mm tt} - {Convert.ToDateTime(reader["EndDateTime"]):MM-dd-yyyy hh:mm tt}";
                    lblDateTime.Text = $"{reader["Venue"]} / {Convert.ToDateTime(reader["StartDateTime"]):MMMM dd, yyyy hh:mm tt} - {Convert.ToDateTime(reader["EndDateTime"]):hh:mm tt}";
                }
                else
                {
                    lblTitle.Text = "Meeting not found";
                    lblDateTime.Text = "";
                }
            }
        }
    }
}


Update 11:11AM
Thanks for sharing your full code üëç I‚Äôve reviewed both your ASPX page and the code-behind, here are my findings and recommendations:


---

‚úÖ Things that look good

Bootstrap 5 integration is correct (you‚Äôre using CDN + your local scripts).

ASP.NET Web Forms controls (Label, TextBox, Button, HiddenField, Panel) are properly declared with runat="server".

Stored Procedure call (MA_GetMeetingDetails) is implemented properly with parameter binding and reader handling.

IsPostBack logic is correct: only loading details once when the page first loads.



---

‚ö†Ô∏è Issues & Improvements

1. Wrong event handler for View Attendees

<asp:Button ID="btnViewAttendees" runat="server" Text="View Attendees"
    CssClass="btn btn-info" OnClick="btnEndMeeting_Click" />

üëâ This button is wired to the End Meeting handler.
‚úÖ Fix: create a separate event in code-behind:

protected void btnViewAttendees_Click(object sender, EventArgs e)
{
    string meetingId = hfMeetingID.Value; // assuming it's stored
    Response.Redirect($"viewattendees.aspx?meetingId={meetingId}");
}

And update your ASPX:

<asp:Button ID="btnViewAttendees" runat="server" Text="View Attendees"
    CssClass="btn btn-info" OnClick="btnViewAttendees_Click" />


---

2. hfMeetingID is never assigned

You declare:

<asp:HiddenField ID="hfMeetingID" runat="server" />

But in code-behind, it‚Äôs not being set after loading details.
‚úÖ Add inside LoadMeetingDetails:

hfMeetingID.Value = meetingId;


---

3. Handling missing/invalid meetingId

Currently:

if (!string.IsNullOrEmpty(meetingId))
{
    LoadMeetingDetails(meetingId);
}
else
{
    lblTitle.Text = "Invalid Meeting";
    lblDateTime.Text = "";
}

If meetingId is invalid (not found in DB), you only update labels.

Consider redirecting back to meeting list with an alert or message.



---

4. SQL Connection handling

You‚Äôre using using (...) which is good.
But SqlDataReader isn‚Äôt disposed.
‚úÖ Wrap in using:

using (SqlDataReader reader = cmd.ExecuteReader())
{
    if (reader.Read())
    {
        // assign labels...
    }
}


---

5. UI alignment

Two buttons (View Attendees, End Meeting) are in the same row but not spaced.
‚úÖ Suggest adding margin:


<asp:Button ID="btnViewAttendees" runat="server" Text="View Attendees"
    CssClass="btn btn-info me-2" OnClick="btnViewAttendees_Click" />


---

6. Potential null values in DB

If EndDateTime is NULL, Convert.ToDateTime(reader["EndDateTime"]) will throw an exception.
‚úÖ Check before converting:

DateTime start = Convert.ToDateTime(reader["StartDateTime"]);
DateTime? end = reader["EndDateTime"] != DBNull.Value ? 
                 Convert.ToDateTime(reader["EndDateTime"]) : (DateTime?)null;

lblDateTime.Text = $"{reader["Venue"]} / {start:MMMM dd, yyyy hh:mm tt}" + 
                   (end.HasValue ? $" - {end:hh:mm tt}" : "");


---

üîë Summary of Changes Needed

1. Create a separate handler for View Attendees button.


2. Assign hfMeetingID.Value when loading details.


3. Wrap SqlDataReader in using.


4. Add null-handling for EndDateTime.


5. Improve UI spacing between buttons.




---

Do you want me to **add the GridView with DataTables styling** for attendees inside this same page when you click "View Attendees"**, or should it redirect to a separate page (viewattendees.aspx`)?



-- Update 12:34PM
Got it üëç ‚Äî when you say ‚Äúthe button became in the bottom‚Äù, it sounds like instead of floating to the right of the radio buttons, they dropped below that whole row.

Right now your markup is like this:

<div class="row">
    <div class="col-3"> ‚Ä¶ radio button 1 ‚Ä¶ </div>
    <div class="col-3"> ‚Ä¶ radio button 2 ‚Ä¶ </div>
    <div class="col-6 col-md-6 d-flex justify-content-end">
        ‚Ä¶ your buttons ‚Ä¶
    </div>
</div>

That col-6 is forcing the buttons to behave like a separate block column.
So instead of sharing the same line, they wrap downwards.


---

‚úÖ Solution: Put radios + buttons in the same flex row

Replace the whole .row with flexbox:

<div class="d-flex align-items-center justify-content-between mb-3">
    <!-- Radios on the left -->
    <div class="d-flex">
        <div class="me-2">
            <input type="radio" class="btn-check" name="options-outlined" id="success-outlined" autocomplete="off" checked>
            <label class="btn btn-outline-primary btn-lg" for="success-outlined">In</label>
        </div>
        <div>
            <input type="radio" class="btn-check" name="options-outlined" id="danger-outlined" autocomplete="off">
            <label class="btn btn-outline-secondary btn-lg" for="danger-outlined">Out</label>
        </div>
    </div>

    <!-- Buttons on the right -->
    <div>
        <asp:Button ID="btnViewAttendees" runat="server" Text="View Attendees"
            CssClass="btn btn-info me-2 w-auto" OnClick="btnViewAttendees_Click" />
        <asp:Button ID="btnEndMeeting" runat="server" Text="End Meeting"
            CssClass="btn btn-danger w-auto" OnClick="btnEndMeeting_Click" />
    </div>
</div>


---

üîë Explanation

d-flex justify-content-between ‚Üí puts radios on the left and buttons on the right, same line.

align-items-center ‚Üí vertically centers them.

Removed the grid col-* since it was forcing wrapping.

Added me-2 for spacing between radios/buttons.



---

üëâ Do you want the buttons to shrink naturally (just enough for their text), or should they have a fixed equal width like your ‚ÄúIn/Out‚Äù radio buttons?


-- Update 12:58
Yes ‚úÖ absolutely possible!
You don‚Äôt need a Tap button ‚Äî you can trigger the check when the user presses Enter in the textbox (or when the card reader sends the Enter key after writing the card serial).


---

üîë How to do it

1. Use AutoPostBack="true" on your TextBox.


2. Handle the TextChanged event in your code-behind.




---

ASPX

<div class="mb-3">
    <asp:TextBox ID="txtCardSerial" runat="server" CssClass="form-control custom-input" 
        placeholder="Place your ID card on the reader"
        AutoPostBack="true" OnTextChanged="txtCardSerial_TextChanged"></asp:TextBox>
</div>


---

Code-behind (C#)

protected void txtCardSerial_TextChanged(object sender, EventArgs e)
{
    string cardSerial = txtCardSerial.Text.Trim();
    string meetingId = hfMeetingID.Value;

    if (string.IsNullOrEmpty(cardSerial))
    {
        ShowAlert("‚ö† Please place your card on the reader.", "alert-warning");
        return;
    }

    string connStr = ConfigurationManager.ConnectionStrings["MeetingDb"].ConnectionString;

    using (SqlConnection conn = new SqlConnection(connStr))
    {
        conn.Open();

        // 1. Check if employee exists
        string checkEmployee = "SELECT EmpName, Dept, Sec FROM tbl_employee WHERE CardSerialNo = @CardSerialNo";
        using (SqlCommand cmd = new SqlCommand(checkEmployee, conn))
        {
            cmd.Parameters.AddWithValue("@CardSerialNo", cardSerial);
            SqlDataReader reader = cmd.ExecuteReader();

            if (!reader.Read())
            {
                ShowAlert("‚ùå Card not registered in the system.", "alert-danger");
                return;
            }

            string empName = reader["EmpName"].ToString();
            string dept = reader["Dept"].ToString();
            string sec = reader["Sec"].ToString();
            reader.Close();

            // 2. Insert into tbl_participant
            string insertParticipant = @"
                INSERT INTO tbl_participant (MeetingId, CardSerialNo, TimeIn)
                VALUES (@MeetingId, @CardSerialNo, GETDATE())";

            using (SqlCommand insertCmd = new SqlCommand(insertParticipant, conn))
            {
                insertCmd.Parameters.AddWithValue("@MeetingId", meetingId);
                insertCmd.Parameters.AddWithValue("@CardSerialNo", cardSerial);
                insertCmd.ExecuteNonQuery();
            }

            // 3. Show success alert
            ShowAlert($"‚úÖ Successfully tapped in: {empName} ({dept} - {sec})", "alert-success");

            // Clear textbox for next scan
            txtCardSerial.Text = "";
        }
    }
}

private void ShowAlert(string message, string cssClass)
{
    pnlAlert.CssClass = $"alert {cssClass} alert-dismissible fade show";
    lblMessage.Text = message;
    pnlAlert.Visible = true;
    ScriptManager.RegisterStartupScript(this, this.GetType(), "fadeOut", "fadeOutAlert();", true);
}


---

üîë Key Points

AutoPostBack="true" ‚Üí makes the textbox fire a postback when Enter is pressed.

OnTextChanged="txtCardSerial_TextChanged" ‚Üí executes logic without needing a button.

After success, txtCardSerial.Text = "" clears the box for the next tap.



---

üëâ Do you also want me to include duplicate prevention (so the same card can‚Äôt tap in multiple times for the same meeting)?

-- Update again 12:58

Perfect üëç yes, converting the inline SQL queries to stored procedures is best practice (cleaner, safer, and easier to maintain).

Right now you have two SQL operations:

1. Check if card exists in tbl_employee.


2. Insert participant record into tbl_participant.




---

‚úÖ Stored Procedures

1. Check Employee by CardSerialNo

CREATE PROCEDURE sp_CheckEmployeeByCard
    @CardSerialNo NVARCHAR(50)
AS
BEGIN
    SET NOCOUNT ON;

    SELECT EmpName, Dept, Sec
    FROM tbl_employee
    WHERE CardSerialNo = @CardSerialNo;
END
GO


---

2. Insert Participant Tap-In

CREATE PROCEDURE sp_InsertParticipant
    @MeetingId INT,
    @CardSerialNo NVARCHAR(50)
AS
BEGIN
    SET NOCOUNT ON;

    INSERT INTO tbl_participant (MeetingId, CardSerialNo, TimeIn)
    VALUES (@MeetingId, @CardSerialNo, GETDATE());
END
GO


---

‚úÖ Code-behind (using stored procs)

protected void txtCardSerial_TextChanged(object sender, EventArgs e)
{
    string cardSerial = txtCardSerial.Text.Trim();
    string meetingId = hfMeetingID.Value;

    if (string.IsNullOrEmpty(cardSerial))
    {
        ShowAlert("‚ö† Please place your card on the reader.", "alert-warning");
        return;
    }

    string connStr = ConfigurationManager.ConnectionStrings["MeetingDb"].ConnectionString;

    using (SqlConnection conn = new SqlConnection(connStr))
    {
        conn.Open();

        // 1. Call sp_CheckEmployeeByCard
        string empName = "";
        string dept = "";
        string sec = "";

        using (SqlCommand cmd = new SqlCommand("sp_CheckEmployeeByCard", conn))
        {
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.Parameters.AddWithValue("@CardSerialNo", cardSerial);

            SqlDataReader reader = cmd.ExecuteReader();
            if (!reader.Read())
            {
                ShowAlert("‚ùå Card not registered in the system.", "alert-danger");
                return;
            }

            empName = reader["EmpName"].ToString();
            dept = reader["Dept"].ToString();
            sec = reader["Sec"].ToString();
            reader.Close();
        }

        // 2. Insert into tbl_participant using sp_InsertParticipant
        using (SqlCommand insertCmd = new SqlCommand("sp_InsertParticipant", conn))
        {
            insertCmd.CommandType = CommandType.StoredProcedure;
            insertCmd.Parameters.AddWithValue("@MeetingId", meetingId);
            insertCmd.Parameters.AddWithValue("@CardSerialNo", cardSerial);
            insertCmd.ExecuteNonQuery();
        }

        // 3. Success alert
        ShowAlert($"‚úÖ Successfully tapped in: {empName} ({dept} - {sec})", "alert-success");

        // Clear for next tap
        txtCardSerial.Text = "";
    }
}


---

üîë Benefits of Stored Procs

Easy to update logic without touching your C# code.

More secure (parameterized queries prevent SQL injection).

Performance boost (SQL Server caches execution plans).



---

üëâ Do you want me to also add duplicate prevention in the stored procedure (so the same card can‚Äôt insert twice for the same meeting), or should I keep it as-is?


-- Update 03:27
Perfect üëç I‚Äôll give you the full working version with Bootstrap alerts included.
This combines your ASPX page, code-behind, and the stored procedures we wrote earlier.


---

‚úÖ Stored Procedures (SQL Server)

-- 1. Check Employee
CREATE PROCEDURE sp_CheckEmployeeByCard
    @CardSerialNo NVARCHAR(50)
AS
BEGIN
    SET NOCOUNT ON;

    SELECT EmpName, Dept, Sec
    FROM tbl_employee
    WHERE CardSerialNo = @CardSerialNo;
END
GO

-- 2. Insert Participant with Duplicate Prevention
CREATE PROCEDURE sp_InsertParticipant
    @MeetingId INT,
    @CardSerialNo NVARCHAR(50)
AS
BEGIN
    SET NOCOUNT ON;

    -- Prevent duplicate tap-in
    IF EXISTS (
        SELECT 1 FROM tbl_participant
        WHERE MeetingId = @MeetingId
          AND CardSerialNo = @CardSerialNo
    )
    BEGIN
        SELECT 0 AS Result; -- Already tapped in
        RETURN;
    END

    -- Insert new record
    INSERT INTO tbl_participant (MeetingId, CardSerialNo, TimeIn)
    VALUES (@MeetingId, @CardSerialNo, GETDATE());

    SELECT 1 AS Result; -- Success
END
GO


---

‚úÖ ASPX Page (meetingattendance.aspx)

<%@ Page Language="C#" AutoEventWireup="true" CodeBehind="meetingattendance.aspx.cs" Inherits="WebApplication1_MAL.meetingattendance1" %>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <title>Meeting Attendance Tapping</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" />
</head>
<body>
    <form id="form1" runat="server">
        <div class="container mt-4">

            <!-- Meeting Info -->
            <h3><asp:Label ID="lblTitle" runat="server" Text="Meeting Title"></asp:Label></h3>
            <p><asp:Label ID="lblDateTime" runat="server" Text="Date/Time"></asp:Label></p>
            <asp:HiddenField ID="hfMeetingID" runat="server" />

            <!-- Tap Input -->
            <div class="mb-3">
                <asp:TextBox ID="txtCardSerial" runat="server" 
                    CssClass="form-control form-control-lg" 
                    placeholder="Tap your ID card"
                    AutoPostBack="true"
                    OnTextChanged="txtCardSerial_TextChanged"></asp:TextBox>
            </div>

            <!-- Bootstrap Alert -->
            <div class="mt-3">
                <asp:Panel ID="pnlAlert" runat="server" Visible="false"
                    CssClass="alert alert-dismissible fade show" role="alert">
                    <asp:Label ID="lblMessage" runat="server"></asp:Label>
                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                </asp:Panel>
            </div>
        </div>
    </form>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>

    <!-- Auto fade-out -->
    <script type="text/javascript">
        function fadeOutAlert() {
            var alertBox = document.getElementById('<%= pnlAlert.ClientID %>');
            if (alertBox && alertBox.style.display !== "none") {
                setTimeout(function () {
                    var bsAlert = new bootstrap.Alert(alertBox);
                    bsAlert.close();
                }, 3000); // disappear after 3s
            }
        }
    </script>
</body>
</html>


---

‚úÖ Code-behind (meetingattendance.aspx.cs)

using System;
using System.Configuration;
using System.Data.SqlClient;
using System.Web.UI;

namespace WebApplication1_MAL
{
    public partial class meetingattendance1 : Page
    {
        protected void Page_Load(object sender, EventArgs e)
        {
            if (!IsPostBack)
            {
                string meetingId = Request.QueryString["meetingId"];
                if (!string.IsNullOrEmpty(meetingId))
                {
                    hfMeetingID.Value = meetingId;
                    LoadMeetingDetails(meetingId);
                }
                else
                {
                    lblTitle.Text = "Invalid Meeting";
                    lblDateTime.Text = "";
                }
            }
        }

        private void LoadMeetingDetails(string meetingId)
        {
            string connStr = ConfigurationManager.ConnectionStrings["MeetingDb"].ConnectionString;

            using (SqlConnection conn = new SqlConnection(connStr))
            using (SqlCommand cmd = new SqlCommand("MA_GetMeetingDetails", conn))
            {
                cmd.CommandType = System.Data.CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@MeetingId", meetingId);

                conn.Open();
                SqlDataReader reader = cmd.ExecuteReader();
                if (reader.Read())
                {
                    lblTitle.Text = reader["Title"].ToString();
                    lblDateTime.Text = $"{reader["Venue"]} / {Convert.ToDateTime(reader["StartDateTime"]):MMMM dd, yyyy hh:mm tt} - {Convert.ToDateTime(reader["EndDateTime"]):hh:mm tt}";
                }
                else
                {
                    lblTitle.Text = "Meeting not found";
                    lblDateTime.Text = "";
                }
            }
        }

        protected void txtCardSerial_TextChanged(object sender, EventArgs e)
        {
            string cardSerial = txtCardSerial.Text.Trim();
            string meetingId = hfMeetingID.Value;

            if (string.IsNullOrEmpty(cardSerial))
            {
                ShowAlert("‚ö† Please place your card on the reader.", "alert-warning");
                return;
            }

            string connStr = ConfigurationManager.ConnectionStrings["MeetingDb"].ConnectionString;

            using (SqlConnection conn = new SqlConnection(connStr))
            {
                conn.Open();

                // 1. Validate Employee
                string empName = "";
                string dept = "";
                string sec = "";

                using (SqlCommand cmd = new SqlCommand("sp_CheckEmployeeByCard", conn))
                {
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@CardSerialNo", cardSerial);

                    SqlDataReader reader = cmd.ExecuteReader();
                    if (!reader.Read())
                    {
                        ShowAlert("‚ùå Card not registered in the system.", "alert-danger");
                        return;
                    }

                    empName = reader["EmpName"].ToString();
                    dept = reader["Dept"].ToString();
                    sec = reader["Sec"].ToString();
                    reader.Close();
                }

                // 2. Insert participant (with duplicate prevention)
                using (SqlCommand insertCmd = new SqlCommand("sp_InsertParticipant", conn))
                {
                    insertCmd.CommandType = System.Data.CommandType.StoredProcedure;
                    insertCmd.Parameters.AddWithValue("@MeetingId", meetingId);
                    insertCmd.Parameters.AddWithValue("@CardSerialNo", cardSerial);

                    object result = insertCmd.ExecuteScalar();

                    if (result != null && result.ToString() == "0")
                    {
                        ShowAlert($"‚ö† {empName} already tapped in for this meeting.", "alert-warning");
                    }
                    else
                    {
                        ShowAlert($"‚úÖ Successfully tapped in: {empName} ({dept} - {sec})", "alert-success");
                    }
                }

                // Clear for next tap
                txtCardSerial.Text = "";
            }
        }

        private void ShowAlert(string message, string cssClass)
        {
            pnlAlert.Visible = true;
            pnlAlert.CssClass = $"alert {cssClass} alert-dismissible fade show";
            lblMessage.Text = message;

            // trigger fade-out
            ScriptManager.RegisterStartupScript(this, GetType(), "fadeOutAlert", "fadeOutAlert();", true);
        }
    }
}


---

‚úÖ Now:

Tapping card (Enter in textbox) checks employee.

If found ‚Üí tries to insert participant.

If duplicate ‚Üí shows yellow warning alert.

If success ‚Üí shows green success alert.

If invalid ‚Üí shows red danger alert.

Alerts auto-hide after 3 seconds.



---

Do you also want me to add a Tap-Out function (updates TimeOut instead of re-inserting), or should we keep it Tap-In only for now?

-- Setings
<div class="alert alert-success" role="alert">
  <h4 class="alert-heading">You have tapped in successfully!</h4>
  <p><FullName></p>
  <p><Dept></p>
  <hr>
  <p class="mb-0"><Current Date & Time></p>
</div>

Got it üëç you want the alert to still use ASP.NET server controls (ASPX) rather than injecting raw HTML.
We can structure the Bootstrap alert markup directly in ASPX with <asp:Label> placeholders that your code-behind will fill.


---

‚úÖ ASPX Markup

<div class="mt-3">
    <asp:Panel ID="pnlAlert" runat="server" Visible="false"
        CssClass="alert alert-dismissible fade show" role="alert">

        <h4 class="alert-heading">
            <asp:Label ID="lblAlertHeading" runat="server"></asp:Label>
        </h4>

        <p><asp:Label ID="lblAlertName" runat="server"></asp:Label></p>
        <p><asp:Label ID="lblAlertDept" runat="server"></asp:Label></p>

        <hr />

        <p class="mb-0">
            <asp:Label ID="lblAlertDateTime" runat="server"></asp:Label>
        </p>

        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </asp:Panel>
</div>


---

‚úÖ Code-behind (meetingattendance.aspx.cs)

private void ShowAlert(string heading, string fullName, string dept, string cssClass)
{
    pnlAlert.Visible = true;
    pnlAlert.CssClass = $"alert {cssClass} alert-dismissible fade show";

    lblAlertHeading.Text = heading;
    lblAlertName.Text = fullName;
    lblAlertDept.Text = dept;
    lblAlertDateTime.Text = DateTime.Now.ToString("MMMM dd, yyyy hh:mm tt");

    // auto fade-out
    ScriptManager.RegisterStartupScript(this, GetType(), "fadeOutAlert", "fadeOutAlert();", true);
}


---

‚úÖ Usage Examples

if (string.IsNullOrEmpty(cardSerial))
{
    ShowAlert("‚ö† Invalid Tap", "Please place your card on the reader.", "", "alert-warning");
    return;
}

if (!reader.Read())
{
    ShowAlert("‚ùå Card Not Registered", "Unknown Card", "", "alert-danger");
    return;
}

if (result != null && result.ToString() == "0")
{
    ShowAlert("‚ö† Already Tapped In", empName, $"{dept} - {sec}", "alert-warning");
}
else
{
    ShowAlert("‚úÖ You have tapped in successfully!", empName, $"{dept} - {sec}", "alert-success");
}


---

‚úÖ This way everything is pure ASPX + C# controls. No raw HTML injection ‚Äî Bootstrap styling is applied via CssClass.

Do you want me to also add a different heading & color for Tap-Out (so the same structure can show ‚ÄúTapped out successfully‚Äù)?


