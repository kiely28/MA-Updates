Mon Sept 08, 2025 - 06:18AM - Update

Got it üëç Let‚Äôs build your EditMeeting.aspx page so that when you click the Edit button in your GridView, it opens this page with the meetingId in the query string.

We‚Äôll do two parts:

1. EditMeeting.aspx (markup) ‚Üí a form to edit meeting details.


2. EditMeeting.aspx.cs (code-behind) ‚Üí loads meeting details from DB and updates them.




---

üîπ 1. EditMeeting.aspx

<%@ Page Language="C#" AutoEventWireup="true" CodeBehind="EditMeeting.aspx.cs" Inherits="WebApplication1_MAL.EditMeeting" %>

<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head runat="server">
    <title>Edit Meeting</title>
    <link href="css/bootstrap.min.css" rel="stylesheet" />
</head>
<body>
    <form id="form1" runat="server" class="container mt-4">
        <h3 class="mb-3">Edit Meeting</h3>

        <asp:Label ID="lblMessage" runat="server" CssClass="text-danger fw-bold"></asp:Label>

        <div class="mb-3">
            <label for="txtTitle" class="form-label">Title</label>
            <asp:TextBox ID="txtTitle" runat="server" CssClass="form-control"></asp:TextBox>
        </div>

        <div class="mb-3">
            <label for="txtStartDate" class="form-label">Start Date & Time</label>
            <asp:TextBox ID="txtStartDate" runat="server" CssClass="form-control"></asp:TextBox>
        </div>

        <div class="mb-3">
            <label for="txtEndDate" class="form-label">End Date & Time</label>
            <asp:TextBox ID="txtEndDate" runat="server" CssClass="form-control"></asp:TextBox>
        </div>

        <div class="mb-3">
            <label for="txtVenue" class="form-label">Venue</label>
            <asp:TextBox ID="txtVenue" runat="server" CssClass="form-control"></asp:TextBox>
        </div>

        <div class="mb-3">
            <label for="ddlStatus" class="form-label">Status</label>
            <asp:DropDownList ID="ddlStatus" runat="server" CssClass="form-select">
                <asp:ListItem Text="Scheduled" Value="Scheduled"></asp:ListItem>
                <asp:ListItem Text="Ongoing" Value="Ongoing"></asp:ListItem>
                <asp:ListItem Text="Completed" Value="Completed"></asp:ListItem>
                <asp:ListItem Text="Cancelled" Value="Cancelled"></asp:ListItem>
            </asp:DropDownList>
        </div>

        <asp:HiddenField ID="hfMeetingId" runat="server" />

        <asp:Button ID="btnUpdate" runat="server" CssClass="btn btn-success" Text="Update Meeting" OnClick="btnUpdate_Click" />
        <a href="meetinglist1.aspx" class="btn btn-secondary">Cancel</a>
    </form>
</body>
</html>


---

üîπ 2. EditMeeting.aspx.cs (Code-behind)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Configuration;

namespace WebApplication1_MAL
{
    public partial class EditMeeting : System.Web.UI.Page
    {
        protected void Page_Load(object sender, EventArgs e)
        {
            if (!IsPostBack)
            {
                string meetingId = Request.QueryString["meetingId"];
                if (!string.IsNullOrEmpty(meetingId))
                {
                    hfMeetingId.Value = meetingId;
                    LoadMeetingDetails(meetingId);
                }
                else
                {
                    lblMessage.Text = "Invalid Meeting ID.";
                    btnUpdate.Enabled = false;
                }
            }
        }

        private void LoadMeetingDetails(string meetingId)
        {
            string connStr = ConfigurationManager.ConnectionStrings["MeetingDb"].ConnectionString;

            using (SqlConnection conn = new SqlConnection(connStr))
            using (SqlCommand cmd = new SqlCommand("MA_GetMeetingById", conn))
            {
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@MeetingID", meetingId);

                conn.Open();
                SqlDataReader reader = cmd.ExecuteReader();
                if (reader.Read())
                {
                    txtTitle.Text = reader["Title"].ToString();
                    txtStartDate.Text = Convert.ToDateTime(reader["StartDateTime"]).ToString("yyyy-MM-dd HH:mm");
                    txtEndDate.Text = Convert.ToDateTime(reader["EndDateTime"]).ToString("yyyy-MM-dd HH:mm");
                    txtVenue.Text = reader["Venue"].ToString();
                    ddlStatus.SelectedValue = reader["Status1"].ToString();
                }
                else
                {
                    lblMessage.Text = "Meeting not found.";
                    btnUpdate.Enabled = false;
                }
            }
        }

        protected void btnUpdate_Click(object sender, EventArgs e)
        {
            string connStr = ConfigurationManager.ConnectionStrings["MeetingDb"].ConnectionString;

            using (SqlConnection conn = new SqlConnection(connStr))
            using (SqlCommand cmd = new SqlCommand("MA_UpdateMeeting", conn))
            {
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@MeetingID", hfMeetingId.Value);
                cmd.Parameters.AddWithValue("@Title", txtTitle.Text.Trim());
                cmd.Parameters.AddWithValue("@StartDateTime", txtStartDate.Text.Trim());
                cmd.Parameters.AddWithValue("@EndDateTime", txtEndDate.Text.Trim());
                cmd.Parameters.AddWithValue("@Venue", txtVenue.Text.Trim());
                cmd.Parameters.AddWithValue("@Status", ddlStatus.SelectedValue);

                conn.Open();
                int rows = cmd.ExecuteNonQuery();

                if (rows > 0)
                {
                    Response.Redirect("meetinglist1.aspx");
                }
                else
                {
                    lblMessage.Text = "Failed to update meeting.";
                }
            }
        }
    }
}


---

üîπ SQL Stored Procedures Needed

You‚Äôll need two stored procedures:

MA_GetMeetingById

CREATE PROCEDURE MA_GetMeetingById
    @MeetingID INT
AS
BEGIN
    SELECT MeetingId, Title, StartDateTime, EndDateTime, Venue, Status1
    FROM tbl_Meetings
    WHERE MeetingId = @MeetingID;
END

MA_UpdateMeeting

CREATE PROCEDURE MA_UpdateMeeting
    @MeetingID INT,
    @Title NVARCHAR(200),
    @StartDateTime DATETIME,
    @EndDateTime DATETIME,
    @Venue NVARCHAR(200),
    @Status NVARCHAR(50)
AS
BEGIN
    UPDATE tbl_Meetings
    SET Title = @Title,
        StartDateTime = @StartDateTime,
        EndDateTime = @EndDateTime,
        Venue = @Venue,
        Status1 = @Status
    WHERE MeetingId = @MeetingID;
END


---

‚úÖ With this setup:

Clicking Edit in your GridView ‚Üí redirects to EditMeeting.aspx?meetingId=123.

The page loads details into the form.

You can edit and click Update ‚Üí saves to DB and redirects back to meeting list.



---

Do you want me to also integrate Bootstrap DateTime Picker for StartDate and EndDate, so it‚Äôs easier for users instead of typing manually?



Update 10:05

Perfect üëç Let‚Äôs make your Edit Meeting form look like a real Bootstrap form with proper layout and modern inputs. I‚Äôll also integrate Bootstrap Date/Time pickers for StartDate and EndDate.


---

üîπ Updated EditMeeting.aspx (Bootstrap UI)

<%@ Page Language="C#" AutoEventWireup="true" CodeBehind="EditMeeting.aspx.cs" Inherits="WebApplication1_MAL.EditMeeting" %>

<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head runat="server">
    <title>Edit Meeting</title>
    <link href="css/bootstrap.min.css" rel="stylesheet" />
    <script src="js/bootstrap.bundle.min.js"></script>
</head>
<body>
    <form id="form1" runat="server" class="container mt-5">
        <div class="card shadow-lg rounded-3">
            <div class="card-header bg-primary text-white">
                <h4 class="mb-0">Edit Meeting</h4>
            </div>
            <div class="card-body">
                <asp:Label ID="lblMessage" runat="server" CssClass="text-danger fw-bold d-block mb-3"></asp:Label>

                <!-- Title -->
                <div class="mb-3">
                    <label for="txtTitle" class="form-label fw-semibold">Title</label>
                    <asp:TextBox ID="txtTitle" runat="server" CssClass="form-control" placeholder="Enter meeting title"></asp:TextBox>
                </div>

                <!-- Start Date -->
                <div class="mb-3">
                    <label for="txtStartDate" class="form-label fw-semibold">Start Date & Time</label>
                    <asp:TextBox ID="txtStartDate" runat="server" CssClass="form-control" TextMode="DateTimeLocal"></asp:TextBox>
                </div>

                <!-- End Date -->
                <div class="mb-3">
                    <label for="txtEndDate" class="form-label fw-semibold">End Date & Time</label>
                    <asp:TextBox ID="txtEndDate" runat="server" CssClass="form-control" TextMode="DateTimeLocal"></asp:TextBox>
                </div>

                <!-- Venue -->
                <div class="mb-3">
                    <label for="txtVenue" class="form-label fw-semibold">Venue</label>
                    <asp:TextBox ID="txtVenue" runat="server" CssClass="form-control" placeholder="Enter meeting venue"></asp:TextBox>
                </div>

                <!-- Status -->
                <div class="mb-3">
                    <label for="ddlStatus" class="form-label fw-semibold">Status</label>
                    <asp:DropDownList ID="ddlStatus" runat="server" CssClass="form-select">
                        <asp:ListItem Text="Scheduled" Value="Scheduled"></asp:ListItem>
                        <asp:ListItem Text="Ongoing" Value="Ongoing"></asp:ListItem>
                        <asp:ListItem Text="Completed" Value="Completed"></asp:ListItem>
                        <asp:ListItem Text="Cancelled" Value="Cancelled"></asp:ListItem>
                    </asp:DropDownList>
                </div>

                <asp:HiddenField ID="hfMeetingId" runat="server" />

                <!-- Buttons -->
                <div class="d-flex justify-content-between">
                    <asp:Button ID="btnUpdate" runat="server" CssClass="btn btn-success px-4" Text="Update Meeting" OnClick="btnUpdate_Click" />
                    <a href="meetinglist1.aspx" class="btn btn-secondary px-4">Cancel</a>
                </div>
            </div>
        </div>
    </form>
</body>
</html>


---

üîπ Key Bootstrap Enhancements

Wrapped everything in a Bootstrap card (.card, .card-header, .card-body) for a modern look.

Used fw-semibold, px-4, mt-5, mb-3 for spacing and typography.

Used HTML5 datetime-local input via TextMode="DateTimeLocal" ‚Üí gives a native date & time picker in Chrome/Edge/Firefox.

Buttons styled with btn-success (Update) and btn-secondary (Cancel).

Layout aligned using d-flex justify-content-between.



---

‚úÖ With this, your Edit Meeting page looks professional, mobile-friendly, and consistent with Bootstrap styling.

üëâ Do you want me to also add client-side validation (Bootstrap validation styles) so users can‚Äôt leave required fields blank before clicking Update?


Update 10:36
Ah ‚úÖ that error comes from sending your datetime values as strings instead of DateTime to SQL Server.

Right now, in your btnUpdate_Click you have:

cmd.Parameters.AddWithValue("@StartDateTime", txtStartDate.Text.Trim());
cmd.Parameters.AddWithValue("@EndDateTime", txtEndDate.Text.Trim());

That sends nvarchar (string) to SQL, and if the string format doesn‚Äôt exactly match SQL Server‚Äôs expected format, you get:

> Error converting datatype nvarchar to datetime




---

üîπ Fix: Convert to DateTime in C#

Instead of sending plain strings, parse them to DateTime before passing to SQL:

protected void btnUpdate_Click(object sender, EventArgs e)
{
    string connStr = ConfigurationManager.ConnectionStrings["MeetingDb"].ConnectionString;

    using (SqlConnection conn = new SqlConnection(connStr))
    using (SqlCommand cmd = new SqlCommand("MA_UpdateMeeting", conn))
    {
        cmd.CommandType = CommandType.StoredProcedure;

        cmd.Parameters.AddWithValue("@MeetingID", hfMeetingId.Value);
        cmd.Parameters.AddWithValue("@Title", txtTitle.Text.Trim());
        cmd.Parameters.AddWithValue("@Venue", txtVenue.Text.Trim());
        cmd.Parameters.AddWithValue("@Status", ddlStatus.SelectedValue);

        // Convert safely from TextBox to DateTime
        DateTime startDate, endDate;
        if (DateTime.TryParse(txtStartDate.Text, out startDate))
        {
            cmd.Parameters.Add("@StartDateTime", SqlDbType.DateTime).Value = startDate;
        }
        else
        {
            lblMessage.Text = "Invalid Start Date format.";
            return;
        }

        if (DateTime.TryParse(txtEndDate.Text, out endDate))
        {
            cmd.Parameters.Add("@EndDateTime", SqlDbType.DateTime).Value = endDate;
        }
        else
        {
            lblMessage.Text = "Invalid End Date format.";
            return;
        }

        conn.Open();
        int rows = cmd.ExecuteNonQuery();

        if (rows > 0)
        {
            Response.Redirect("meetinglist1.aspx");
        }
        else
        {
            lblMessage.Text = "Failed to update meeting.";
        }
    }
}


---

üîπ Why this works

DateTime.TryParse() converts the user input (string) into a proper DateTime object.

SqlDbType.DateTime ensures SQL Server receives the correct type, not nvarchar.

If parsing fails, you show a clear error instead of crashing.



---

‚ö° Question for you:
When you load the form, do you want the datetime textboxes (txtStartDate, txtEndDate) to automatically display in the correct format (yyyy-MM-ddTHH:mm), so that the HTML5 datetime-local input works properly?



Update 12:34

Understood üëç you mean the ASP.NET LinkButton that triggers the server-side EditMeeting command.
You want:

If Status = Ongoing ‚Üí clicking Edit should show an alert and not redirect.

For other statuses ‚Üí normal redirect to EditMeeting.aspx.


We‚Äôll handle this in RowDataBound because it lets us check the bound status before rendering the row.


---

üîπ Code-behind (RowDataBound)

Add this method to your page:

protected void gvMeetings_RowDataBound(object sender, GridViewRowEventArgs e)
{
    if (e.Row.RowType == DataControlRowType.DataRow)
    {
        // Get the status text
        Label lblStatus = (Label)e.Row.FindControl("lblStatus");

        // Get the Edit button (server-side one)
        LinkButton editButton = (LinkButton)e.Row.FindControl("EditButton");

        if (lblStatus != null && lblStatus.Text == "Ongoing")
        {
            if (editButton != null)
            {
                // Block editing and show alert
                editButton.OnClientClick = "alert('‚ö† You cannot edit a meeting that is already ongoing.'); return false;";
            }
        }
    }
}


---

üîπ GridView Markup Change

Right now your Edit button has no ID, so we can‚Äôt find it. Update it like this:

<asp:LinkButton ID="EditButton" runat="server" 
    CommandName="EditMeeting" CommandArgument='<%# Eval("MeetingId") %>' 
    CssClass="btn btn-sm text-warning me-1" ToolTip="Edit">
    <i class="fas fa-pencil-alt"></i>
</asp:LinkButton>


---

üîπ What Happens

When the GridView binds, if the row‚Äôs status = Ongoing, we attach an OnClientClick alert that cancels the postback.

User sees:
‚ö† You cannot edit a meeting that is already ongoing.

For Scheduled/Completed/Cancelled ‚Üí Edit works normally (Response.Redirect("EditMeeting.aspx?...")).



---

üëâ Do you also want me to completely hide the Edit button instead of disabling it with an alert for Ongoing meetings?



Update 12:40
Perfect üëç Let‚Äôs integrate the date restriction into your existing EditMeeting.aspx form that we made earlier.
I‚Äôll use Bootstrap form groups + <input type="datetime-local"> with min attribute (no extra libraries needed).


---

üîπ Updated EditMeeting.aspx

<%@ Page Language="C#" AutoEventWireup="true" CodeBehind="EditMeeting.aspx.cs" Inherits="WebApplication1_MAL.EditMeeting" %>

<!DOCTYPE html>
<html lang="en">
<head runat="server">
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>Edit Meeting</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" />
</head>
<body>
    <form id="form1" runat="server" class="container mt-5">
        <div class="card shadow p-4">
            <h3 class="mb-4">Edit Meeting</h3>

            <asp:HiddenField ID="hfMeetingId" runat="server" />

            <div class="mb-3">
                <label for="txtTitle" class="form-label">Title</label>
                <asp:TextBox ID="txtTitle" runat="server" CssClass="form-control" />
            </div>

            <div class="mb-3">
                <label for="txtVenue" class="form-label">Venue</label>
                <asp:TextBox ID="txtVenue" runat="server" CssClass="form-control" />
            </div>

            <div class="mb-3">
                <label for="txtStartDate" class="form-label">Start Date & Time</label>
                <asp:TextBox ID="txtStartDate" runat="server" TextMode="DateTimeLocal" CssClass="form-control" />
            </div>

            <div class="mb-3">
                <label for="txtEndDate" class="form-label">End Date & Time</label>
                <asp:TextBox ID="txtEndDate" runat="server" TextMode="DateTimeLocal" CssClass="form-control" />
            </div>

            <div class="d-flex justify-content-between">
                <asp:Button ID="btnUpdate" runat="server" Text="Update" CssClass="btn btn-primary" OnClick="btnUpdate_Click" />
                <a href="meetinglist1.aspx" class="btn btn-secondary">Cancel</a>
            </div>

            <asp:Label ID="lblMessage" runat="server" CssClass="text-danger fw-bold mt-3 d-block"></asp:Label>
        </div>
    </form>

    <script>
        document.addEventListener("DOMContentLoaded", function () {
            let now = new Date();
            let localDatetime = now.toISOString().slice(0, 16); // yyyy-MM-ddTHH:mm

            // Apply restriction to prevent past selection
            document.getElementById("<%= txtStartDate.ClientID %>").setAttribute("min", localDatetime);
            document.getElementById("<%= txtEndDate.ClientID %>").setAttribute("min", localDatetime);
        });
    </script>
</body>
</html>


---

üîπ Behavior

When editing, Start Date and End Date fields will not allow choosing a date/time earlier than now.

Works on desktop browsers with native date pickers.

No external JS libraries required.



---

üëâ Do you also want me to add validation so that End Date must always be greater than Start Date (both in client-side JS and server-side check)?

Update 12:54

Got it üëç
You want the StartMeeting button in GridView to:

1. Show a JavaScript confirm dialog before starting.


2. If Yes ‚Üí update the meeting‚Äôs status in tbl_meetings (Ongoing) and redirect to meetingattendance.aspx.


3. If No ‚Üí cancel.



We can handle this with OnClientClick for the confirmation, and keep your RowCommand logic for updating + redirect.


---

üîπ GridView Markup (StartMeeting Button)

Update your StartMeeting button like this:

<asp:LinkButton ID="btnStartMeeting" runat="server"
    CommandName="StartMeeting"
    CommandArgument='<%# Eval("MeetingId") %>'
    CssClass="btn btn-sm text-primary me-1"
    ToolTip="Start Meeting"
    OnClientClick="return confirm('‚ö† Do you want to start this meeting? Once started, it will be marked as Ongoing.');">
    <i class="far fa-eye"></i>
</asp:LinkButton>

‚úÖ The OnClientClick="return confirm(...)" will stop the postback if the user clicks Cancel.
If they click OK, it proceeds to the server.


---

üîπ Code-behind (RowCommand)

Your existing gvMeetings_RowCommand already updates the meeting status and redirects.
Here‚Äôs the final version for clarity:

protected void gvMeetings_RowCommand(object sender, GridViewCommandEventArgs e)
{
    string meetingId = e.CommandArgument.ToString();

    if (e.CommandName == "StartMeeting")
    {
        string connectionString = ConfigurationManager.ConnectionStrings["MeetingDb"].ConnectionString;

        using (SqlConnection conn = new SqlConnection(connectionString))
        {
            using (SqlCommand cmd = new SqlCommand("UpdateMeetingStatus", conn))
            {
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@MeetingID", meetingId);
                cmd.Parameters.AddWithValue("@Status", "Ongoing"); // pass new status

                conn.Open();
                cmd.ExecuteNonQuery();
            }
        }

        // Redirect to Attendance page
        Response.Redirect($"meetingattendance.aspx?meetingId={meetingId}");
    }

    else if (e.CommandName == "EditMeeting")
    {
        Response.Redirect($"EditMeeting.aspx?meetingId={meetingId}");
    }

    else if (e.CommandName == "DeleteMeeting")
    {
        DeleteMeeting(meetingId);
        LoadMeetings(); // refresh grid
    }
}


---

üîπ SQL Stored Procedure (UpdateMeetingStatus)

Make sure your UpdateMeetingStatus SP accepts a Status parameter:

CREATE PROCEDURE UpdateMeetingStatus
    @MeetingID INT,
    @Status NVARCHAR(50)
AS
BEGIN
    UPDATE tbl_meetings
    SET Status = @Status
    WHERE MeetingID = @MeetingID;
END


---

‚úÖ Result:

User clicks StartMeeting ‚Üí confirm alert pops up.

If Yes ‚Üí meeting status set to Ongoing + redirected to meetingattendance.aspx.

If No ‚Üí nothing happens.



---

Do you also want me to make the StartMeeting button hidden/disabled when the meeting status is already Ongoing (like we did for Edit)?

---
Okay, I see üëå

So now you want:

If status = Scheduled ‚Üí StartMeeting shows confirm alert ‚Üí update DB status to Ongoing ‚Üí redirect to meetingattendance.aspx.

If status = Ongoing ‚Üí user clicks StartMeeting ‚Üí show alert (‚ÄúMeeting already ongoing, continue?‚Äù) ‚Üí redirect to meetingattendance.aspx without updating DB.


We‚Äôll handle this in two parts:


---

üîπ 1. GridView Markup

Give the Start button an ID so we can find it:

<asp:LinkButton ID="btnStartMeeting" runat="server"
    CommandName="StartMeeting"
    CommandArgument='<%# Eval("MeetingId") %>'
    CssClass="btn btn-sm text-primary me-1"
    ToolTip="Start Meeting">
    <i class="far fa-eye"></i>
</asp:LinkButton>


---

üîπ 2. Code-behind (RowDataBound ‚Üí set proper JS alert)

protected void gvMeetings_RowDataBound(object sender, GridViewRowEventArgs e)
{
    if (e.Row.RowType == DataControlRowType.DataRow)
    {
        Label lblStatus = (Label)e.Row.FindControl("lblStatus");
        LinkButton btnStart = (LinkButton)e.Row.FindControl("btnStartMeeting");

        if (lblStatus != null && btnStart != null)
        {
            if (lblStatus.Text == "Ongoing")
            {
                // Meeting already ongoing ‚Üí continue to attendance
                btnStart.OnClientClick = "return confirm('‚ö† This meeting is already ongoing. Do you want to continue to the attendance page?');";
            }
            else
            {
                // Scheduled ‚Üí update to ongoing first
                btnStart.OnClientClick = "return confirm('‚ö† Do you want to start this meeting? Once started, it will be marked as Ongoing.');";
            }
        }
    }
}


---

üîπ 3. Code-behind (RowCommand)

Update your RowCommand to check status again:

protected void gvMeetings_RowCommand(object sender, GridViewCommandEventArgs e)
{
    string meetingId = e.CommandArgument.ToString();

    if (e.CommandName == "StartMeeting")
    {
        string connectionString = ConfigurationManager.ConnectionStrings["MeetingDb"].ConnectionString;

        // Check status first
        string status = "";
        using (SqlConnection conn = new SqlConnection(connectionString))
        using (SqlCommand cmd = new SqlCommand("SELECT Status FROM tbl_meetings WHERE MeetingID = @MeetingID", conn))
        {
            cmd.Parameters.AddWithValue("@MeetingID", meetingId);
            conn.Open();
            status = cmd.ExecuteScalar()?.ToString();
        }

        if (status == "Scheduled")
        {
            // Update to Ongoing
            using (SqlConnection conn = new SqlConnection(connectionString))
            using (SqlCommand cmd = new SqlCommand("UpdateMeetingStatus", conn))
            {
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@MeetingID", meetingId);
                cmd.Parameters.AddWithValue("@Status", "Ongoing");

                conn.Open();
                cmd.ExecuteNonQuery();
            }
        }

        // Redirect to attendance page either way
        Response.Redirect($"meetingattendance.aspx?meetingId={meetingId}");
    }

    else if (e.CommandName == "EditMeeting")
    {
        Response.Redirect($"EditMeeting.aspx?meetingId={meetingId}");
    }

    else if (e.CommandName == "DeleteMeeting")
    {
        DeleteMeeting(meetingId);
        LoadMeetings();
    }
}


---

‚úÖ Behavior now:

Scheduled meeting ‚Üí alert (‚ÄúDo you want to start?‚Äù) ‚Üí DB updated ‚Üí redirect.

Ongoing meeting ‚Üí alert (‚ÄúAlready ongoing, continue?‚Äù) ‚Üí DB not updated ‚Üí redirect.



---

Do you also want me to hide the Start button completely if the meeting is already Completed or Cancelled?

