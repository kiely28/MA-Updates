<%@ Page Language="C#" AutoEventWireup="true" CodeBehind="meetinglist.aspx.cs" Inherits="meetingattendance.meetinglist" %>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no" />
    <meta name="description" content="" />
    <meta name="author" content="" />
    <title>Meeting Attendance Tapping</title>

    <!-- Fonts -->
    <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Nunito">

    <!-- Custom styles -->
    <%--<link href="css/styles.css" rel="stylesheet" />--%>
    <!-- ??? -->
    <link href="/Content/styles.css" rel="stylesheet" />

    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">

    <!-- Font Awesome -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css" rel="stylesheet" />

    <!-- Existing JS -->
    <%--<script src="~/Scripts/jquery-3.2.0.min.js"></script>--%>

    <!-- Font Awesome Free 5.15.4 -->
    <script src="/Scripts/all.min.js"></script>

    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    
</head>

<body class="sb-nav-fixed">
    <form id="form1" runat="server">
        <!-- Top Navbar -->
        <nav class="navbar navbar-expand" style="background-color: #10218B;" data-bs-theme="dark">
            <div class="container-fluid">
                <a class="navbar-brand ps-3" href="home.aspx" style="font-weight: bold; font-family: nunito; font-size: 17px;">Meeting Attendance Tapping</a>
                <!-- Sidebar Toggle-->
                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">
                    <span class="navbar-toggler-icon"></span>
                </button>
                <div class="collapse navbar-collapse" id="navbarNav">
                    <ul class="navbar-nav ms-auto">
                        <li class="nav-item"><a class="nav-link" href="home.aspx">Dashboard</a></li>
                        <li class="nav-item"><a class="nav-link active" href="meetinglist.aspx">Meetings</a></li>
                    </ul>
                </div>
                <!-- User Dropdown -->
                <ul class="navbar-nav ms-auto me-3">
                    <li class="nav-item dropdown">
                        <a class="nav-link dropdown-toggle" id="navbarDropdown" href="#" role="button" data-bs-toggle="dropdown" aria-expanded="false"><i class="fas fa-user fa-fw"></i></a>
                        <ul class="dropdown-menu dropdown-menu-end" aria-labelledby="navbarDropdown">
                            <%--<li><a class="dropdown-item" href="#">Logout</a></li>--%>
                            <li>
                                <asp:LinkButton ID="btnLogout" runat="server" CssClass="dropdown-item" OnClick="btnLogout_Click">Logout</asp:LinkButton>
                            </li>
                        </ul>
                    </li>
                </ul>
            </div>
        </nav>



        <main>
            <div class="container-fluid px-4">
                <h1 class="mt-3">Meetings</h1>
                <ol class="breadcrumb mb-4 mt-3">
                    <li class="breadcrumb-item"><a href="home.aspx">Dashboard</a></li>
                    <li class="breadcrumb-item active">Meetings</li>
                </ol>


                <asp:Panel ID="pnlSuccess" runat="server" CssClass="alert alert-success d-flex align-items-center alert-dismissible fade show" Visible="false">
                    <i class="fa fa-check-circle me-2"></i>
                    <div>Saved successfully.</div>
                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                </asp:Panel>

                <asp:LinkButton ID="btnAddNew" runat="server" CssClass="btn btn-primary mb-3"
                    OnClientClick="resetForm(); showModal(); return false;">
                    <i class="fa fa-plus"></i> Create New Meeting
                </asp:LinkButton>



                <div class="row g-4">
                    <div class="container mt-4">
                        <div class="card">
                            <div class="card-header d-flex align-items-center">
                                <i class="bi bi-list me-2" style="font-size: 1.5rem; cursor: pointer;"></i>
                                <span>Meetings List</span>
                            </div>
                            <div class="card-body">
                                <!-- Table -->
                                <asp:GridView ID="gvMeetings" runat="server" CssClass="table table-bordered" UseAccessibleHeader="true"
                                    AutoGenerateColumns="False" OnRowCommand="gvMeetings_RowCommand" DataKeyNames="MeetingId" OnRowCreated="gvMeetings_RowCreated" OnRowDataBound="gvMeetings_RowDataBound">
                                    <Columns>
                                        <asp:TemplateField HeaderText="#" HeaderStyle-HorizontalAlign="Center">
                                            <ItemTemplate>
                                                <%# Container.DataItemIndex + 1 %>
                                            </ItemTemplate>
                                        </asp:TemplateField>
                                        <asp:BoundField DataField="MeetingId" HeaderText="Meeting ID" />
                                        <asp:BoundField DataField="Title" HeaderText="Title" />
                                        <asp:BoundField DataField="StartDateTime" HeaderText="Start Date" DataFormatString="{0:MM/dd/yyyy hh:mm tt}" />
                                        <asp:BoundField DataField="EndDateTime" HeaderText="End Date" DataFormatString="{0:MM/dd/yyyy hh:mm tt}" />
                                        <asp:BoundField DataField="Venue" HeaderText="Venue" />
                                        <asp:TemplateField HeaderText="Status">
                                            <ItemTemplate>
                                                <asp:Label ID="lblStatus" runat="server" Text='<%# Eval("Status1") %>' CssClass="badge"></asp:Label>
                                            </ItemTemplate>
                                        </asp:TemplateField>


                                        <asp:TemplateField>
                                            <HeaderTemplate>
                                                <i class="bi bi-gear-fill"></i> Actions
                                            </HeaderTemplate>
                                            <ItemTemplate>

                                                <%--<asp:LinkButton ID="btnStartMeeting" runat="server"
                                                    CommandName="StartMeeting"
                                                    CommandArgument='<%# Eval("MeetingId") %>'
                                                    CssClass="btn btn-sm text-primary me-1"
                                                    ToolTip="Start Meeting">
                                                    <i class="far fa-eye"></i>
                                                </asp:LinkButton>--%>

                                                <asp:LinkButton ID="btnStartMeeting" runat="server"
                                                    CommandName="StartMeeting"
                                                    CommandArgument='<%# Container.DataItemIndex %>'
                                                    CssClass="btn btn-sm text-primary me-1"
                                                    ToolTip="Start Meeting">
                                                    <i class="far fa-eye"></i>
                                                </asp:LinkButton>


                                                <asp:LinkButton ID="EditButton" runat="server"
                                                    CommandName="EditMeeting" CommandArgument='<%# Eval("MeetingId") %>'
                                                    CssClass="btn btn-sm text-warning me-1" ToolTip="Edit Meeting">
                                                    <i class="fas fa-pencil-alt"></i>
                                                </asp:LinkButton>

                                                <asp:LinkButton runat="server" CommandName="DeleteMeeting" CommandArgument='<%# Eval("MeetingId") %>' CssClass="btn btn-sm text-danger me-1" OnClientClick="return confirm('Are you sure you want to delete this meeting?');" ToolTip="Delete Meeting">
                                                        <i class="fas fa-trash fs-6"></i>
                                                </asp:LinkButton>

                                            </ItemTemplate>
                                        </asp:TemplateField>
                                    </Columns>
                                </asp:GridView>
                                <asp:Label ID="lblMessage" runat="server" CssClass="text-danger fw-bold"></asp:Label>
                                <!-- End Table -->
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Modal -->
                <div class="modal fade" id="addNewModal" tabindex="-1" aria-labelledby="addNewModalLabel" aria-hidden="true">
                    <div class="modal-dialog modal-lg">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h5 class="modal-title" id="addNewModalLabel"><i class="far fa-calendar-plus me-2"></i>Add New Meeting</h5>
                                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                            </div>

                            <!-- Wrap modal body in a form for Bootstrap validation -->
                            <div class="modal-body">

                                <!-- Title -->
                                <div class="mb-3">
                                    <label class="form-label">Title <span class="text-danger">*</span></label>
                                    <asp:TextBox ID="txtTitle" runat="server" CssClass="form-control" />
                                    <div class="invalid-feedback">Title is required.</div>
                                    <asp:RequiredFieldValidator ID="rfvTitle" runat="server" ControlToValidate="txtTitle"
                                        ErrorMessage="Title is required." CssClass="text-danger" Display="Dynamic"
                                        ValidationGroup="CreateMeeting" />
                                </div>

                                <div class="row">
                                    <div class="col-md-6 mb-3">
                                        <!-- Start Date -->
                                        <label class="form-label">Start Date <span class="text-danger">*</span></label>
                                        <asp:TextBox ID="txtStartDateTime" runat="server" CssClass="form-control" TextMode="DateTimeLocal" />
                                        <div class="invalid-feedback">Start date is required.</div>
                                        <asp:RequiredFieldValidator ID="rfvStartDate" runat="server" ControlToValidate="txtStartDateTime"
                                            ErrorMessage="Start date is required." CssClass="text-danger" Display="Dynamic"
                                            ValidationGroup="CreateMeeting" />
                                    </div>

                                    <div class="col-md-6 mb-3">
                                        <!-- End Date -->
                                        <label class="form-label">End Date <span class="text-danger">*</span></label>
                                        <asp:TextBox ID="txtEndDateTime" runat="server" CssClass="form-control" TextMode="DateTimeLocal" />
                                        <div class="invalid-feedback">End date is required.</div>
                                        <asp:RequiredFieldValidator ID="rfvEndDate" runat="server" ControlToValidate="txtEndDateTime"
                                            ErrorMessage="End date is required." CssClass="text-danger" Display="Dynamic"
                                            ValidationGroup="CreateMeeting" />
                                    </div>
                                </div>

                                <!-- Venue -->
                                <div class="mb-3">
                                    <label class="form-label">Location <span class="text-danger">*</span></label>
                                    <asp:TextBox ID="txtVenue" runat="server" CssClass="form-control" />
                                    <div class="invalid-feedback">Location is required.</div>
                                    <asp:RequiredFieldValidator ID="rfvVenue" runat="server" ControlToValidate="txtVenue"
                                        ErrorMessage="Location is required." CssClass="text-danger" Display="Dynamic"
                                        ValidationGroup="CreateMeeting" />
                                </div>

                                <!-- Organizer -->
                                <div class="mb-3">
                                    <label class="form-label">Organizer <span class="text-danger">*</span></label>
                                    <asp:TextBox ID="txtOrganizer" runat="server" CssClass="form-control" />
                                    <div class="invalid-feedback">Organizer is required.</div>
                                    <asp:RequiredFieldValidator ID="rfvOrganizer" runat="server" ControlToValidate="txtOrganizer"
                                        ErrorMessage="Organizer is required." CssClass="text-danger" Display="Dynamic"
                                        ValidationGroup="CreateMeeting" />
                                </div>

                            </div>

                            <div class="modal-footer">
                                <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">
                                    Cancel
                                </button>
                                <asp:Button ID="btnSave" runat="server" CssClass="btn btn-primary"
                                    Text="Save" OnClick="btnSave_Click" ValidationGroup="CreateMeeting" />
                            </div>
                        </div>
                    </div>
                </div>
                <!-- End Save Modal -->

            </div>
        </main>
    </form>

    <!-- Scripts already in your footer -->
    <%--<script src="/Scripts/bootstrap.bundle.min.js"></script>--%>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
    <script src="/Scripts/scripts.js"></script>
    <script src="/Scripts/simple-datatables.js"></script>
    <script src="/Scripts/datatables-simple-demo.js"></script>
    <!-- Bootstrap JS -->

    <!-- Apply DataTable -->
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const table = document.querySelector("#<%= gvMeetings.ClientID %>");
            if (table) {
                new simpleDatatables.DataTable(table);
            }
        });
    </script>

    <!-- Bootstrap JS -->
    <script>
        function showModal() {
            var modal = new bootstrap.Modal(document.getElementById('addNewModal'));
            modal.show();
        }

        function resetForm() {
            document.getElementById('<%= txtTitle.ClientID %>').value = '';
            document.getElementById('<%= txtStartDateTime.ClientID %>').value = '';

            document.getElementById('<%= txtEndDateTime.ClientID %>').value = '';

            document.getElementById('<%= txtVenue.ClientID %>').value = '';
            document.getElementById('<%= txtOrganizer.ClientID %>').value = '';
        }

        function closeModal() {
            var modalEl = document.getElementById('addNewModal');
            var modal = bootstrap.Modal.getInstance(modalEl);
            modal.hide();
        }
    </script>

    <%--<script>
        document.getElementById('addNewModal').addEventListener('shown.bs.modal', function () {
            let now = new Date();
            let localDatetime = now.toISOString().slice(0, 16);

            document.getElementById("<%= txtStartDateTime.ClientID %>").setAttribute("min", localDatetime);
        document.getElementById("<%= txtEndDateTime.ClientID %>").setAttribute("min", localDatetime);
    });
    </script>--%>

    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const startInput = document.getElementById('<%= txtStartDateTime.ClientID %>');
        const endInput = document.getElementById('<%= txtEndDateTime.ClientID %>');

        // Set initial min values when modal is shown
        document.getElementById('addNewModal').addEventListener('shown.bs.modal', function () {
            let now = new Date();
            let localDatetime = now.toISOString().slice(0, 16);
            startInput.setAttribute("min", localDatetime);
            endInput.setAttribute("min", localDatetime);
        });

        // Update end datetime min when start datetime changes
        startInput.addEventListener('change', function () {
            const selectedStart = startInput.value;
            endInput.setAttribute("min", selectedStart);

            // Optional: Clear end datetime if it's before the new start datetime
            if (endInput.value < selectedStart) {
                endInput.value = "";
            }
        });
    });
    </script>



    <script>
        document.addEventListener("DOMContentLoaded", function () {
            var alertBox = document.getElementById("<%= pnlSuccess.ClientID %>");
        if (alertBox && alertBox.style.display !== "none") {
            setTimeout(function () {
                var bsAlert = new bootstrap.Alert(alertBox);
                bsAlert.close();
            }, 3000); // disappear after 3s
        }
    });
    </script>

</body>
</html>


-- Code behind

using System;
using System.Collections.Generic;
using System.Configuration;
using System.Data;
using System.Data.SqlClient;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;

namespace meetingattendance
{
    public partial class meetinglist : System.Web.UI.Page
    {
        //protected void Page_Load(object sender, EventArgs e)
        //{
        //    if (!IsPostBack)
        //    {
        //        LoadMeetings();
        //    }
        //}

        protected void Page_Load(object sender, EventArgs e)
        {

            if (Session["Username"] == null) // or any session you set at login
            {
                Response.Redirect("/login.aspx");
                return;
            }

            if (!IsPostBack)
            {
                LoadMeetings();

                if (Session["MeetingEnded"] != null && Session["MeetingEnded"].ToString() == "true")
                {
                    // Show the success panel
                    pnlSuccess.Visible = true;

                    // Update the message if needed
                    pnlSuccess.Controls.Clear();
                    pnlSuccess.Controls.Add(new LiteralControl(
                        "<i class='fa fa-check-circle me-2'></i> Meeting ended successfully."
                    ));

                    // Clear the session so it only shows once
                    Session.Remove("MeetingEnded");
                }
            }
        }





        private void LoadMeetings()
        {
            string connStr = ConfigurationManager.ConnectionStrings["MeetingDb"].ConnectionString;
            string currentUser = Session["Username"].ToString(); //"B014172"; //Session["B014172"].ToString(); //User.Identity.Name; // or Session["Username"].ToString();

            using (SqlConnection conn = new SqlConnection(connStr))
            using (SqlCommand cmd = new SqlCommand("MA_GetUserMeetings", conn))
            {
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@CreatedBy", currentUser);

                using (SqlDataAdapter da = new SqlDataAdapter(cmd))
                {
                    DataTable dt = new DataTable();
                    da.Fill(dt);

                    if (dt.Rows.Count > 0)
                    {
                        gvMeetings.DataSource = dt;
                        gvMeetings.DataBind();
                        lblMessage.Text = "";
                    }
                    else
                    {
                        lblMessage.Text = "No upcoming meetings found.";
                        gvMeetings.DataSource = null;
                        gvMeetings.DataBind();
                    }
                }
            }
        }



        protected void gvMeetings_RowCommand(object sender, GridViewCommandEventArgs e)
        {
            if (e.CommandName == "StartMeeting")
            {
                int rowIndex = Convert.ToInt32(e.CommandArgument);
                GridViewRow row = gvMeetings.Rows[rowIndex];

                // Get values from GridView cells (adjust index if needed)
                string meetingId = gvMeetings.DataKeys[rowIndex].Value.ToString();
                string title = row.Cells[2].Text;   // Title column
                string start = row.Cells[3].Text;   // Start Date column
                string end = row.Cells[4].Text;     // End Date column
                string location = row.Cells[5].Text; // Venue column
                //string status = row.Cells[6].Text; // Status column
                Label lblStatus = (Label)row.FindControl("lblStatus");
                string status = lblStatus.Text;


                // Save to Session
                Session["MeetingId"] = meetingId;
                Session["Title"] = title;
                Session["StartTime"] = start;
                Session["EndTime"] = end;
                Session["Location"] = location;


                if (status == "Scheduled")
                {
                    // Update to Ongoing
                    // (Optional) Update meeting status if still Scheduled
                    string connectionString = ConfigurationManager.ConnectionStrings["MeetingDb"].ConnectionString;
                    using (SqlConnection conn = new SqlConnection(connectionString))
                    using (SqlCommand cmd = new SqlCommand("MA_UpdateMeetingStatus", conn))
                    {
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.Parameters.AddWithValue("@MeetingID", meetingId);
                        cmd.Parameters.AddWithValue("@Status", "Ongoing");

                        conn.Open();
                        cmd.ExecuteNonQuery();
                    }
                }

                // Redirect without query string (details are in Session now)
                //Response.Redirect("meetingattendance.aspx");
                Response.Redirect($"meetingattendance.aspx?meetingId={meetingId}");
            }

            else if (e.CommandName == "EditMeeting")
            {
                string meetingId = e.CommandArgument.ToString();
                Response.Redirect($"editmeeting.aspx?meetingId={meetingId}");
            }

            else if (e.CommandName == "DeleteMeeting")
            {
                string meetingId = e.CommandArgument.ToString();
                DeleteMeeting(meetingId);
                LoadMeetings();
            }
        }



        //protected void gvMeetings_RowCommand(object sender, GridViewCommandEventArgs e)
        //{
        //    string meetingId = e.CommandArgument.ToString();

        //    if (e.CommandName == "StartMeeting")
        //    {
        //        string connectionString = ConfigurationManager.ConnectionStrings["MeetingDb"].ConnectionString;

        //        // Check status first
        //        string status = "";
        //        using (SqlConnection conn = new SqlConnection(connectionString))
        //        using (SqlCommand cmd = new SqlCommand("SELECT Status1 FROM Tbl_Meetings WHERE MeetingID = @MeetingID", conn))
        //        {
        //            cmd.Parameters.AddWithValue("@MeetingID", meetingId);
        //            conn.Open();
        //            status = cmd.ExecuteScalar()?.ToString();
        //        }

        //        if (status == "Scheduled")
        //        {
        //            // Update to Ongoing
        //            using (SqlConnection conn = new SqlConnection(connectionString))
        //            using (SqlCommand cmd = new SqlCommand("MA_UpdateMeetingStatus", conn))
        //            {
        //                cmd.CommandType = CommandType.StoredProcedure;
        //                cmd.Parameters.AddWithValue("@MeetingID", meetingId);
        //                cmd.Parameters.AddWithValue("@Status", "Ongoing");

        //                conn.Open();
        //                cmd.ExecuteNonQuery();
        //            }
        //        }

        //        // Redirect to attendance page either way
        //        Response.Redirect($"meetingattendance.aspx?meetingId={meetingId}");
        //    }

        //    else if (e.CommandName == "EditMeeting")
        //    {
        //        Response.Redirect($"EditMeeting.aspx?meetingId={meetingId}");
        //    }

        //    else if (e.CommandName == "DeleteMeeting")
        //    {
        //        DeleteMeeting(meetingId);
        //        LoadMeetings();
        //    }
        //}

        protected void gvMeetings_RowCreated(object sender, GridViewRowEventArgs e)
        {
            if (e.Row.RowType == DataControlRowType.Header)
            {
                e.Row.TableSection = TableRowSection.TableHeader;
            }
        }


        private void DeleteMeeting(string meetingId)
        {
            string connStr = ConfigurationManager.ConnectionStrings["MeetingDb"].ConnectionString;

            using (SqlConnection conn = new SqlConnection(connStr))
            using (SqlCommand cmd = new SqlCommand("MA_DeleteMeeting", conn))
            {
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@MeetingId", meetingId);

                conn.Open();
                cmd.ExecuteNonQuery();
            }
        }

        protected void btnSave_Click(object sender, EventArgs e)
        {
            string connStr = ConfigurationManager.ConnectionStrings["MeetingDb"].ConnectionString;
            string meetingId = "";
            string currentUser = Session["Username"].ToString(); // Later replace with Session["Username"] or User.Identity.Name

            try
            {
                using (SqlConnection conn = new SqlConnection(connStr))
                using (SqlCommand cmd = new SqlCommand("MA_InsertMeeting", conn))
                {
                    cmd.CommandType = CommandType.StoredProcedure;

                    cmd.Parameters.AddWithValue("@Title", txtTitle.Text);
                    cmd.Parameters.Add("@StartDateTime", SqlDbType.DateTime).Value = DateTime.Parse(txtStartDateTime.Text);
                    cmd.Parameters.Add("@EndDateTime", SqlDbType.DateTime).Value = DateTime.Parse(txtEndDateTime.Text);
                    cmd.Parameters.AddWithValue("@Venue", txtVenue.Text);
                    cmd.Parameters.AddWithValue("@Organizer", txtOrganizer.Text);
                    cmd.Parameters.AddWithValue("@CreatedBy", currentUser);

                    SqlParameter outputParam = new SqlParameter("@MeetingId", SqlDbType.NVarChar, 50)
                    {
                        Direction = ParameterDirection.Output
                    };
                    cmd.Parameters.Add(outputParam);

                    conn.Open();
                    cmd.ExecuteNonQuery();
                    conn.Close();

                    meetingId = outputParam.Value.ToString();

                    // Show success panel
                    pnlSuccess.Visible = true;

                    // Refresh grid so new meeting shows up
                    LoadMeetings();

                    // Close modal + show success alert
                    ScriptManager.RegisterStartupScript(this, this.GetType(), "saveSuccess",
                        "closeModal(); showSuccessAlert();", true);
                }
            }
            catch (SqlException sqlEx)
            {
                // SQL Server error
                lblMessage.Text = "Database error: " + sqlEx.Message;
                lblMessage.CssClass = "text-danger fw-bold";
            }
            catch (FormatException)
            {
                // Handle invalid date format
                lblMessage.Text = "Invalid date format. Please check Start/End Date fields.";
                lblMessage.CssClass = "text-danger fw-bold";
            }
            catch (Exception ex)
            {
                // General error
                lblMessage.Text = "Unexpected error: " + ex.Message;
                lblMessage.CssClass = "text-danger fw-bold";
            }
        }

        protected void gvMeetings_RowDataBound(object sender, GridViewRowEventArgs e)
        {
            if (e.Row.RowType == DataControlRowType.DataRow)
            {
                // Get the status text
                Label lblStatus = (Label)e.Row.FindControl("lblStatus");

                // Get the Edit button (server-side one)
                LinkButton editButton = (LinkButton)e.Row.FindControl("EditButton");

                if (lblStatus != null && lblStatus.Text == "Ongoing")
                {
                    if (editButton != null)
                    {
                        // Block editing and show alert
                        editButton.OnClientClick = "alert('You cannot edit a meeting that is already ongoing.'); return false;";
                    }
                }

                // Add Badge for Status
                if (lblStatus != null)
                {
                    //string status = lblStatus.Text.ToLower();
                    string status = lblStatus.Text.Trim().ToLower();

                    switch (status)
                    {
                        case "scheduled":
                            lblStatus.CssClass = "badge bg-info";
                            break;
                        case "ongoing":
                            lblStatus.CssClass = "badge bg-success";
                            break;
                        //case "missed":
                        //    lblStatus.CssClass = "badge bg-danger";
                        //    break;
                        default:
                            lblStatus.CssClass = "badge bg-secondary";
                            break;

                    }
                }
                LinkButton btnStart = (LinkButton)e.Row.FindControl("btnStartMeeting");

                if (lblStatus != null && btnStart != null)
                {
                    if (lblStatus.Text == "Ongoing")
                    {
                        // Meeting already ongoing → continue to attendance
                        btnStart.OnClientClick = "return confirm('This meeting is already ongoing. Do you want to continue?');";
                    }
                    else
                    {
                        // Scheduled → update to ongoing first
                        btnStart.OnClientClick = "return confirm('Do you want to start this meeting?');";
                    }
                }




                // Get raw values
                string rawStartDate = DataBinder.Eval(e.Row.DataItem, "StartDateTime").ToString();
                string rawEndDate = DataBinder.Eval(e.Row.DataItem, "EndDateTime").ToString();
                string status1 = DataBinder.Eval(e.Row.DataItem, "Status1").ToString();

                DateTime startDate, endDate;

                // Parse dates safely
                bool hasStartDate = DateTime.TryParse(rawStartDate, out startDate);
                bool hasEndDate = DateTime.TryParse(rawEndDate, out endDate);

                // Condition: EndDate is past and status is "Scheduled"
                if (hasStartDate && endDate < DateTime.Now && status1 == "Scheduled")
                {
                    e.Row.Cells[0].BackColor = System.Drawing.ColorTranslator.FromHtml("#F8D7DA");
                    e.Row.Cells[0].ForeColor = System.Drawing.ColorTranslator.FromHtml("#460000");

                    e.Row.Cells[1].BackColor = System.Drawing.ColorTranslator.FromHtml("#F8D7DA");
                    e.Row.Cells[1].ForeColor = System.Drawing.ColorTranslator.FromHtml("#460000");

                    e.Row.Cells[2].BackColor = System.Drawing.ColorTranslator.FromHtml("#F8D7DA");
                    e.Row.Cells[2].ForeColor = System.Drawing.ColorTranslator.FromHtml("#460000");

                    e.Row.Cells[3].BackColor = System.Drawing.ColorTranslator.FromHtml("#F8D7DA");
                    e.Row.Cells[3].ForeColor = System.Drawing.ColorTranslator.FromHtml("#460000");

                    e.Row.Cells[4].BackColor = System.Drawing.ColorTranslator.FromHtml("#F8D7DA");
                    e.Row.Cells[4].ForeColor = System.Drawing.ColorTranslator.FromHtml("#460000");

                    e.Row.Cells[5].BackColor = System.Drawing.ColorTranslator.FromHtml("#F8D7DA");
                    e.Row.Cells[5].ForeColor = System.Drawing.ColorTranslator.FromHtml("#460000");

                    //e.Row.Cells[6].BackColor = System.Drawing.ColorTranslator.FromHtml("#F8D7DA");
                    //e.Row.Cells[6].ForeColor = System.Drawing.ColorTranslator.FromHtml("#460000");

                    //e.Row.Cells[7].BackColor = System.Drawing.ColorTranslator.FromHtml("#F8D7DA");
                    //e.Row.Cells[7].ForeColor = System.Drawing.ColorTranslator.FromHtml("#460000");
                }

                // Condition: EndDate is past and status is "Ongoing"
                if (hasEndDate && endDate < DateTime.Now && status1 == "Ongoing")
                {
                    e.Row.Cells[0].BackColor = System.Drawing.ColorTranslator.FromHtml("#FFF3CD");
                    e.Row.Cells[0].ForeColor = System.Drawing.ColorTranslator.FromHtml("#604200");

                    e.Row.Cells[1].BackColor = System.Drawing.ColorTranslator.FromHtml("#FFF3CD");
                    e.Row.Cells[1].ForeColor = System.Drawing.ColorTranslator.FromHtml("#604200");

                    e.Row.Cells[2].BackColor = System.Drawing.ColorTranslator.FromHtml("#FFF3CD");
                    e.Row.Cells[2].ForeColor = System.Drawing.ColorTranslator.FromHtml("#604200");

                    e.Row.Cells[3].BackColor = System.Drawing.ColorTranslator.FromHtml("#FFF3CD");
                    e.Row.Cells[3].ForeColor = System.Drawing.ColorTranslator.FromHtml("#604200");

                    e.Row.Cells[4].BackColor = System.Drawing.ColorTranslator.FromHtml("#FFF3CD");
                    e.Row.Cells[4].ForeColor = System.Drawing.ColorTranslator.FromHtml("#604200");

                    e.Row.Cells[5].BackColor = System.Drawing.ColorTranslator.FromHtml("#FFF3CD");
                    e.Row.Cells[5].ForeColor = System.Drawing.ColorTranslator.FromHtml("#604200");

                    //e.Row.Cells[6].BackColor = System.Drawing.ColorTranslator.FromHtml("#FFF3CD");
                    //e.Row.Cells[6].ForeColor = System.Drawing.ColorTranslator.FromHtml("#604200");

                    //e.Row.Cells[7].BackColor = System.Drawing.ColorTranslator.FromHtml("#FFF3CD");
                    //e.Row.Cells[7].ForeColor = System.Drawing.ColorTranslator.FromHtml("#604200");
                }
            }
        }


        [System.Web.Services.WebMethod]
        public static object GetMeetingById(string meetingId)
        {
            string connStr = ConfigurationManager.ConnectionStrings["MeetingDb"].ConnectionString;
            using (SqlConnection conn = new SqlConnection(connStr))
            using (SqlCommand cmd = new SqlCommand("GetMeetingById", conn))
            {
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@MeetingId", meetingId);
                conn.Open();

                using (SqlDataReader dr = cmd.ExecuteReader())
                {
                    if (dr.Read())
                    {
                        return new
                        {
                            MeetingId = dr["MeetingId"].ToString(),
                            Title = dr["Title"].ToString(),
                            StartDateTime = Convert.ToDateTime(dr["StartDateTime"]).ToString("yyyy-MM-ddTHH:mm"),
                            EndDateTime = Convert.ToDateTime(dr["EndDateTime"]).ToString("yyyy-MM-ddTHH:mm"),
                            Venue = dr["Venue"].ToString(),
                            Organizer = dr["Organizer"].ToString()
                        };
                    }
                }
            }
            return null;
        }



        protected void btnLogout_Click(object sender, EventArgs e)
        {
            Session.Clear();
            Session.Abandon();

            if (Request.Cookies[".ASPXAUTH"] != null)
            {
                HttpCookie authCookie = new HttpCookie(".ASPXAUTH");
                authCookie.Expires = DateTime.Now.AddDays(-1);
                Response.Cookies.Add(authCookie);
            }

            Response.Redirect("/login.aspx");
        }



    }
}
