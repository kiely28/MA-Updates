Risk Assessment
Risk Control

Background
Purpose
Benefits
Countermeasure

DESCRIPTION
PURPOSE

Tbl_Meetings
Tbl_Participants
Tbl_Roles

MA_CheckEmployeeByCard
MA_DeleteMeeting
EndMeeting
GetAttendeesByMeeting
GetAttendeesByMeetingId
GetAttendeesByOrganizer
GetMeetingById
GetMeetingCounts
GetUserMeetings
GetUserMeetingsHistory
InsertAttendee
InsertMeeting
UpdateAttendeeTimeout
UpdateMeeting
UpdateMeetingStatus
ViewAttendeesReport

editmeeting.aspx
historylogs.aspx
home.aspx
login.aspx
meetingattendance.aspx
meetinglist.aspx
viewattendees.aspx


Here‚Äôs a clear and organized description and purpose for each table, stored procedure, and page in your Meeting Attendance Tapping Program ‚Äî suitable for documentation or system description sections:


---

üóÉÔ∏è Database Tables

1. Tbl_Meetings

Description:
Stores all meeting details created in the system.
Purpose:
Acts as the main reference table for meeting information such as meeting ID, title, date, time, organizer, group, and status.


---

2. Tbl_Participants

Description:
Contains the list of all employees or users who can join or be assigned to meetings.
Purpose:
Serves as a master list of users with their details such as employee ID, name, department, and assigned groups for meeting attendance validation.


---

3. Tbl_Roles

Description:
Defines the different roles available in the system (e.g., Admin, Organizer, Participant).
Purpose:
Used to manage access levels and permissions for users within the meeting attendance system.


---

‚öôÔ∏è Stored Procedures / Functions

1. MA_CheckEmployeeByCard

Description:
Validates an employee‚Äôs ID or card number during attendance tapping.
Purpose:
Ensures that only registered participants can log attendance and retrieves their details (name, department, group) upon tapping.


---

2. MA_DeleteMeeting

Description:
Deletes a specific meeting record from the database.
Purpose:
Used by authorized users (e.g., Admin or Organizer) to remove meetings that were created by mistake or no longer needed.


---

3. EndMeeting

Description:
Marks a meeting as completed or ended.
Purpose:
Prevents further attendance tapping and finalizes the meeting for reporting or record purposes.


---

4. GetAttendeesByMeeting

Description:
Retrieves all attendees for a specific meeting.
Purpose:
Used to display or report the list of participants who attended a particular meeting.


---

5. GetAttendeesByMeetingId

Description:
Fetches attendees using the meeting‚Äôs unique ID.
Purpose:
Enables quick retrieval of attendance data tied to a specific meeting record.


---

6. GetAttendeesByOrganizer

Description:
Retrieves meetings and attendees based on the organizer‚Äôs ID.
Purpose:
Allows organizers to monitor attendance for the meetings they created.


---

7. GetMeetingById

Description:
Returns detailed information for a specific meeting using its ID.
Purpose:
Used for editing, viewing, or validating meeting information.


---

8. GetMeetingCounts

Description:
Counts total meetings by category, status, or user.
Purpose:
Provides summary data for dashboards or statistical reports.


---

9. GetUserMeetings

Description:
Retrieves active or upcoming meetings assigned to a specific user.
Purpose:
Allows users to see the meetings they can attend or are part of.


---

10. GetUserMeetingsHistory

Description:
Shows past meetings attended or created by a specific user.
Purpose:
Supports history viewing and report generation for user participation.


---

11. InsertAttendee

Description:
Inserts a new attendance record when a user taps their ID.
Purpose:
Automatically records attendance details such as time-in, meeting ID, and participant ID.


---

12. InsertMeeting

Description:
Adds a new meeting record into the database.
Purpose:
Used when an organizer creates a new meeting from the web interface.


---

13. UpdateAttendeeTimeout

Description:
Updates the time-out or end time for a participant‚Äôs attendance record.
Purpose:
Tracks both time-in and time-out for accurate meeting duration logging.


---

14. UpdateMeeting

Description:
Modifies existing meeting information such as title, date, or group.
Purpose:
Allows organizers or admins to edit meeting details after creation.


---

15. UpdateMeetingStatus

Description:
Changes the meeting‚Äôs current status (e.g., Active, Completed, Cancelled).
Purpose:
Keeps the system updated with the correct meeting state for display and logic control.


---

16. ViewAttendeesReport

Description:
Generates a detailed report of all attendees per meeting.
Purpose:
Used for analytics, printing, or exporting attendance reports by meeting, organizer, or group.


---

üíª Web Pages

1. editmeeting.aspx

Description:
Page for editing or updating meeting details.
Purpose:
Allows authorized users to modify meeting information after creation.


---

2. historylogs.aspx

Description:
Displays historical logs of meetings and attendance.
Purpose:
Provides a record of past meetings and attendance activity for review or audit.


---

3. home.aspx

Description:
Main dashboard page of the system.
Purpose:
Displays summary information such as upcoming meetings, statistics, and shortcuts to key features.


---

4. login.aspx

Description:
User login page.
Purpose:
Authenticates users based on their credentials and assigns access based on role.


---

5. meetingattendance.aspx

Description:
Page where participants tap or enter their ID to log attendance.
Purpose:
Serves as the main interface for recording attendance in real-time.


---

6. meetinglist.aspx

Description:
Displays a list of all meetings created in the system.
Purpose:
Allows users (especially organizers/admins) to view, manage, or open specific meeting details.


---

7. viewattendees.aspx

Description:
Shows the list of attendees for a selected meeting.
Purpose:
Used to monitor attendance, check real-time logs, and generate printable reports.


---

Would you like me to include a short version (1‚Äì2 lines each) formatted for system documentation or database design sheet (like in a table format)?

----

Your statements are already clear and well-written! üëç
Here‚Äôs a slightly refined version with small grammar and flow improvements for a more polished look:


---

Background: The meeting attendance tapping system was developed to enhance accuracy and make report generation faster.

Purpose: The purpose of the system is to automate and centralize attendance recording for accurate, real-time monitoring and reporting.

Benefits: The system improves efficiency, ensures data accuracy, supports multiple users, and provides instant access to attendance records.

Countermeasure: To ensure smooth and secure operation, the system implements user access control and duplicate entry prevention.


---

‚úÖ This version keeps your original meaning but reads more naturally and professionally. Would you like me to make it even simpler (for a presentation or summary format)?

---

Here‚Äôs a sample Risk Assessment and Risk Control section you can use for your Meeting Attendance Tapping System (web-based system).
It‚Äôs concise, realistic, and applicable to your current project setup.


---

üßæ Risk Assessment and Risk Control

1. System Overview

The Meeting Attendance Tapping System automates the recording of attendance through a web interface, where employees tap their ID to log time-in and time-out. Data is stored in a central SQL Server database and accessed by authorized users.


---

2. Risk Assessment Table

No.	Risk Description	Possible Cause	Impact	Likelihood	Risk Level	Risk Control / Countermeasure

1	Unauthorized access to attendance records	Weak user authentication or password sharing	Data breach or tampering of records	Medium	High	Implement role-based access control (RBAC); enforce strong password policies and session timeouts.
2	Duplicate attendance entries	User tapping multiple times or system not validating previous tap	Inaccurate attendance reports	Medium	Medium	Add duplicate entry prevention logic using stored procedures (InsertAttendee with check conditions).
3	System downtime during meeting	Server crash, network issues, or database failure	Unable to record attendance	High	Medium	Regular system backup, enable error recovery, and implement connection retry logic.
4	Incorrect time logging	Server time mismatch or manual system clock change	Misleading attendance records	Medium	Low	Use centralized server time; restrict client-side time manipulation.
5	Loss of data	Database corruption or accidental deletion	Permanent loss of attendance data	High	Low	Perform daily database backups; limit DELETE operations to authorized admins only (MA_DeleteMeeting with confirmation).
6	SQL Injection or data manipulation	Unsafe query inputs from the web form	Database compromise	High	Medium	Use parameterized stored procedures for all queries (InsertMeeting, GetAttendeesByMeetingId, etc.).
7	Privacy violation	Exposure of employee details in logs or reports	Breach of confidentiality	Medium	Low	Apply data masking on reports; restrict report access to authorized roles only.
8	Slow response or lag during tapping	High traffic, unoptimized queries, or inefficient code	Poor user experience	Medium	Medium	Optimize database queries and indexes; enable asynchronous processing for attendance validation.
9	User error during tapping	Wrong ID entered, network lag, or double click	Attendance not recorded properly	Low	Medium	Implement validation message and real-time status feedback after tapping.
10	Unauthorized modification of meeting data	Admin misuse or compromised account	Altered attendance records	High	Low	Implement audit logs to track changes and require double confirmation for critical updates.



---

3. Risk Control Summary

Access Control: Role-based user management (Admin, Organizer, Participant).

Data Validation: Stored procedures handle duplicate and invalid data prevention.

System Security: Parameterized queries, secure authentication, and audit logging.

Data Protection: Regular backups and restricted deletion rights.

Operational Continuity: Local caching and retry mechanism during temporary outages.

Monitoring: Error logs and admin dashboard to detect abnormal activities.



---

4. Example of Risk Monitoring Procedure

Review logs weekly for failed login attempts or unusual attendance patterns.

Verify daily database backup completion.

Conduct periodic vulnerability assessments.

Ensure users are trained on secure system usage (e.g., not sharing credentials).



---

Would you like me to make a formatted version (e.g., for a report or document) ‚Äî with proper headers and layout (Word/PDF style)? I can create it next.


